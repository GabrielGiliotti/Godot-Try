Godot Engine


Parte 1:


Primeira parte fala sobre o editor e a interface do mesmo. 
F1 - Acessa o workspace 2D
F2 - Acessa o workspace 3D
F3 - Acessa o workspace de Scripts
F4 - Fornece todas as Classes e suas descrições

Para alterar a interface da ferramenta, voltar ao inicio da documentação.


Parte 2: 

Nodes são como uma geladeira cheia de ingredientes que você pode utilizar.
Tudo herda de Node (Node2D, Node3D, tudo)
- Tem um nome
- Tem propriedades editaveis
- Pode receber um callback para processar os frames
- Pode ser extendido para ter mais funções
- Pode ser adicionado como node filho de um outro node

OBS: É possivel criar uma arvore de Nodes


Uma Cena é um grupo de nodes organizados hierarquicamente (Em forma de arvore).
- Uma Cena sempre tem um Node raiz
- Uma cena pode ser salva em disco e carregada de volta
- Uma cena pode ser instanciada 

Rodar um game é basicamente rodar uma Cena. Uma cena deve ser definida como principal (main scene).
Godot editor é um editor de cenas.

A partir daqui é fazer o tutorial e descobrir o que cada Node e recurso pode fazer. Tudo depende de cada objeto criado.

# Em Project --> Project Settings --> Application --> Run podemos definir a Main Scene 
  Realizando esse procedimento, não importa a cena que esta sendo editada, essa cena sera executada primeiro.

Na documentação , em Scenes and Nodes --> Configuring the project podemos ler sobre ProjectSettings, que diz
como mudar as configurações de projeto via scripts e interface.


Parte 3:


Um projeto pode conter um numero Ilimitado de Cenas. Dessa forma, tem-se Os pacotes de cenas.
Cada pacote tem a extensão ".tscn" como nome.

# Uma cena salva pode ser instanciada ou ser posta como instancia de outra cena.

No exemplo do tutorial, temos 2 Cenas: Um "suporte" e uma Bola.
Pegamos então instancias da bola e fazemos dela uma instancia da cena principal.

# Se modificarmos atributos de uma instancia, mudamos de todas elas. Por isso, precisamos torna-las unicas na cena a qual
  uma sub-cena inserida pertence.(Em algum canto temos um botao "Make Unique" para que a alteração em uma instancia não
  afeta outras)

# Em canvasItem --> visibility conseguimos mudar a cor do objeto. (Ainda não sabemos como pintar um objeto com várias
  cores, como criar um personagem com roupas. Mas me parece que criamos a imagem e depois damos movimento á elas)



Parte 4: (Pra mim o mais importante - Scripting)


Em resumo as opções são utilizar as linguagens:

GDScript - Aceita diretamente pela iterface, muito próxima de Python e LUA.
C++ - é mais eficiente para games.

"Finally, one of our brightest additions for the 3.0 release: GDNative allows scripting in C++ without needing to 
 recompile (or even restart) Godot." 

OBS: C++ não tem suport oficial, ja GDScript tem.


Nodes devem ser referenciados pelo nome e nao pelo tipo.

O exemplo de uso de script foi feito com um botao e 2 labels. (1 estatico e 1 dinamico) (Nome Script: Kill)

Acredito que ainda não haja conhecimento suficiente para documentar scripts completos.
Assim que ganhar pratica faço uma doc melhor sobre as funções e as cenas montadas.


Em um jogo de arma onde há bots aliados e inimigos, criamos grupos para dividir os times (por exemplo).
No godot, para se trabalhar com os Groups é necessário tem um node, onde o grupo fica nesse node.



Scripting (Continued)


Varias ações no godot são acionadas por callbacks ou virtual functions. Mas é comum a necessidade de um script rodar
cada frame de uma cena. 

Elas usam ou Idle processing ou physics processing

Idle é ativado com a chamada do método Node._process(). Esse metodo pode ser ativado e desativado pela função 
Node.set_process().

A frquencia com a qual esse metodo sera chamado depende de quantos frames por segundo (FPS) sua aplicação estará rodando.
Sua taxa pode variar de acordo com o tempo ou de acordo com o dispositivo.

Para ajudar a gerenciar a variabilidade, um parametro "delta" é passado e contem o tempo percorrido em segundos, a partir
da ultima chamada de _process();

Por exemplo, tempos de movimentos são frequentemente multiplicados pelo delta, para fazer a valocidade do movimento
constante e independente da taxa de frames.

 
physics_proccess() é similar, mas deve ser usado para processos que ocorrem antes de passos fisicos, como controlar um
personagem. Sempre roda antes de um passo fisico e é chamado em intervalos de tempo fixos: 60 segundos.

Em:   Project Settings, under Physics -> Common -> Physics Fps    podemos mudar o tempo desse intervalo



 * Groups (Em Scripting continued)


Para adicionar grupos é necessário ter um node selecionado. A aba de grupos fica baixo da aba Node no lado direito da
interface. Também é possivel adicionar grupos por script, mas não vou colocar os scripts aqui.

Na SceneTree existem varios metodos bons para se realizar açoes. Se possivel olhar eles depois


 * Notifications (Em scripting continued)


Em Class Reference podem ser vistas os tipos de notificações que podemser recebidos. GDScript tambem fornece funções
simples que podem ser sobrescritas.


 * Overridable functions

    Todas essas funções são sobrescreviveis e podem ser aplicadas em nodes:

    func _enter_tree():
    # When the node enters the Scene Tree, it becomes active
    # and  this function is called. Children nodes have not entered
    # the active scene yet. In general, it's better to use _ready()
    # for most cases.
    pass

    func _ready():
    # This function is called after _enter_tree, but it ensures
    # that all children nodes have also entered the Scene Tree,
    # and became active.
    pass

    func _exit_tree():
    # When the node exits the Scene Tree, this function is called.
    # Children nodes have all exited the Scene Tree at this point
    # and all became inactive.
    pass

    func _process(delta):
    # This function is called every frame.
    pass

    func _physics_process(delta):
    # This is called every physics frame.
    pass

    É melhor utilizar essas funções no codigo sobrescrevendo todas , que usar as notificações do sistema
 	


 * Criando um node via script 
 
    var s
    func _ready():
    s = Sprite.new() # Create a new sprite!
    add_child(s) # Add it as a child of this node.


    Para remover um node criado, faça:

    func _someaction():
    s.free() # Immediately removes the node from the scene and frees it.


    Ao remover um node, seus nodes filhos tambem removidos (efeito cascata) 
    Para remover um node sem ter problemas, utilize a função queue_free() que reconheçe se um node ou sub node esta
    executando algum processo e espera seu termino para exclui-lo.

    func _someaction():
    s.queue_free() # Removes the node from the scene and frees it when it becomes safe to do so.
    	

 * Instanciando cenas 

    Para instanciar uma cena é necessario utilizar esses 2 passos: 
            
    1 - var scene = load("res://myscene.tscn") # Will load when the script is instanced.
  
    ou 
 
    1 - var scene = preload("res://myscene.tscn") # Will load when parsing the script.
 
    Para criar uma cena efetivamente, é necessario chamar o codigo :

    2 - var node = scene.instance()
        add_child(node)

    A vantagem de se usar esses dois passos é que a cena se mantem carregada e pronta para uso, então voce pode criar
    quantas instancias forem necessarias. Isso é muito util para instanciar varios inimigos, balas ou outras entidades
    na cena que esta ativa.

 
 * Registrar a classe de scripts

    Você pode nomear um script e registrá-lo como um tipo no editor com a palavra-chave class_name seguida pelo nome da 
    classe. Você pode adicionar uma vírgula e um caminho opcional a uma imagem para usar como ícone. Você encontrará seu 
    novo tipo na caixa de diálogo Criação de nó ou recurso.
  
   
        extends Node

        # Declare the class name here
        class_name ScriptName, "res://path/to/optional/icon.svg"

        func _ready():
        var this = ScriptName           # reference to the script
        var cppNode = MyCppNode.new()   # new instance of a class named MyCppNode

        cppNode.queue_free()
   


 Parei em Signals

	
