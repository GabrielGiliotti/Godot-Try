Godot Engine


Parte 1:


Primeira parte fala sobre o editor e a interface do mesmo. 
F1 - Acessa o workspace 2D
F2 - Acessa o workspace 3D
F3 - Acessa o workspace de Scripts
F4 - Fornece todas as Classes e suas descrições

Para alterar a interface da ferramenta, voltar ao inicio da documentação.


Parte 2: 

Nodes são como uma geladeira cheia de ingredientes que você pode utilizar.
Tudo herda de Node (Node2D, Node3D, tudo)
- Tem um nome
- Tem propriedades editaveis
- Pode receber um callback para processar os frames
- Pode ser extendido para ter mais funções
- Pode ser adicionado como node filho de um outro node

OBS: É possivel criar uma arvore de Nodes


Uma Cena é um grupo de nodes organizados hierarquicamente (Em forma de arvore).
- Uma Cena sempre tem um Node raiz
- Uma cena pode ser salva em disco de carregada de volta
- Uma cena pode ser instanciada 

Rodar um game é basicamente rodar uma Cena. Uma cena deve ser definida como principal (main scene).
Godot editor é um editor de cenas.

A partir daqui é fazer o tutorial e descobrir o que cada Node e recurso pode fazer. Tudo depende de cada objeto criado.

# Em Project --> Project Settings --> Application --> Run podemo definir a Main Scene 
  Realizando esse procedimento, não importa a cena que esta sendo editada, essa cena sera executada primeiro.

Na documentação , em Scenes and Nodes --> Configuring the project podemos ler sobre ProjectSettings, que diz
como mudar as configurações de projeto via scripts e interface.


Parte 3:


Um projeto pode conter um numero Ilimitado de Cenas. Dessa forma, tem-se Os pacotes de cenas.
Cada pacote tem a extensão ".tscn" como nome.

# Uma cena salva pode ser instanciada ou ser posta como instancia de outra cena.

No exemplo do tutorial, temos 2 Cenas: Um "suporte" e uma Bola.
Pegamos então instancias da bola e fazemos dela uma instancia da cena principal.

# Se modificarmos atributos de uma instancia, mudamos de todas elas. Por isso, precisamos torna-las unicas na cena a qual
  uma sub-cena inserida pertence.(Em algum canto temos um botao "Make Unique" para que a alteração em uma instancia não
  afeta outras)

# Em canvasItem --> visibility conseguimos mudar a cor do objeto. (Ainda não sabemos como pintar um objeto com várias
  cores, como criar um personagem com roupas. Mas me parece que criamos a imagem e depois damos movimento á elas)



Parte 4: (Pra mim o mais importante - Scripting)


Em resumo as opções são utilizar as linguagens:

GDScript - Aceita diretamente pela iterface, muito próxima de Python e LUA.
C++ - é mais eficiente para games.

"Finally, one of our brightest additions for the 3.0 release: GDNative allows scripting in C++ without needing to 
 recompile (or even restart) Godot." 

OBS: C++ não tem suport oficial, ja GDScript tem.


Nodes devem ser referenciados pelo nome e nao pelo tipo.

O exemplo de uso de script foi feito com um botao e 2 labels. (1 estatico e 1 dinamico)
Acredito que ainda não haja conhecimento suficiente para docuemntar scripts completos.
Assim que ganhar pratica faço uma doc melhor sobre as funções e as cenas montadas.


Parei em: Scripting (Continued)



 
 











